;crustygame save:1024
expr SAVEDATA_SIZE 1024
expr SAVEDATA_CHECKSUM_POS "SAVEDATA_SIZE - 1"

expr SEQUENCE_SAMPLE_MEM_SIZE 32768

include lib/crustygame.inc
include lib/fills.inc
include lib/videomode.inc
include lib/timers.inc
include lib/text.inc
include lib/objects.inc
include lib/savedata.inc

macro CENTER RESULT SPACESIZE ITEMSIZE
    move RESULT SPACESIZE
    sub  RESULT ITEMSIZE
    div  RESULT 2
endmacro CENTER

include crustris_files/crustris_defs.inc
include crustris_files/crustris_pit.inc
include crustris_files/crustris_highscore.inc

binclude gfx ints crustris_files/crustris.crsg
binclude font ints lib/font.crsg
binclude title ints crustris_files/crustris_logo.crsg

proc draw_pit
    move gfx_draw_layer pit_shadow_layer_id
    move gfx_draw_layer pit_pattern1_layer_id
    move gfx_draw_layer pit_pattern0_layer_id
    move gfx_draw_layer pit_background_layer_id
    move gfx_draw_layer pit_layer_id0
    move gfx_draw_layer pit_layer_id1
    move gfx_draw_layer pit_layer_id2
ret

proc draw_piece layer_id piece rotation x y
    local scaledx
    local scaledy
    local piecex
    local pos
    local width
    local height
    local window ints 2
    local position floats "0.0 0.0"
    local intPosition ints 2
    local scaled_tile floats 0.0

    call populate_piece_values piece rotation pos width height

    ; initial tilemap position
    move window:1 piece
    mul  window:1 TILE_SIDE 

    ; size of a tile in float which will be used to accumulate location
    move scaled_tile TILE_SIDE
    mul  scaled_tile objects_global_scale

    ; get the starting scaled position
    move scaledx x
    mul  scaledx objects_global_scale
    add  scaledx objects_global_offset:0
    move scaledy y
    mul  scaledy objects_global_scale
    add  scaledy objects_global_offset:1

    ; get initial y position
    move position:1 scaledy
 
    label y
        ; copy in to a storage useful by gfx
        move intPosition:1 position:1

        ; get initial x position
        move position:0 scaledx
        move piecex width
        label x
            cmp pieces:pos
            jumpz nodraw

            ; copy to an int to be useful by gfx
            move intPosition:0 position:0
            move gfx_set_layer_pos:layer_id intPosition
            move window:0 0
            move gfx_set_layer_scroll_pos:layer_id window
            move gfx_draw_layer layer_id
            add  window:0 TILE_SIDE
            move gfx_set_layer_scroll_pos:layer_id window
            move gfx_draw_layer layer_id
            add  window:0 TILE_SIDE
            move gfx_set_layer_scroll_pos:layer_id window
            move gfx_draw_layer layer_id
            label nodraw

            ; advance table pointer
            add pos 1
            ; calculate next x position
            add position:0 scaled_tile
            sub piecex 1
        jumpg x

        ; calculate next y position
        add position:1 scaled_tile
        sub height 1
    jumpg y 
ret

static gfx_id
static font_id
static title_id
static block_tilemap_id
static block_layer_id
static pit_tilemap_id0
static pit_tilemap_id1
static pit_tilemap_id2
static pit_layer_id0
static pit_layer_id1
static pit_layer_id2
static pit_background_id
static pit_background_layer_id
static window_background_id
static window_background_layer_id
static window_pattern_id
static window_pattern0_layer_id
static window_pattern1_layer_id
static pit_shadow_id
static pit_shadow_layer_id
static pit_pattern_id
static pit_pattern0_layer_id
static pit_pattern1_layer_id
static labels_tilemap_id
static labels_layer0_id
static labels_layer1_id
static title_tilemap_id
static title_layer_id
static shade_layer_id
static characters_tilemap_id
static characters_layer_id
static high_score_tilemap_id
static high_score_layer_id

static block_obj
static pit0_obj
static pit1_obj
static pit2_obj
static pit_bg_obj
static win_bg_obj
static pit_sh_obj
static win_pat0_obj
static win_pat1_obj
static pit_pat0_obj
static pit_pat1_obj
static labels0_obj
static labels1_obj
static number0_obj
static number1_obj
static title_obj
static shade_obj
static characters_obj
static high_score_obj

static pitxpos
static pitypos

proc update_level
    local levelindex

    move levelindex level
    cmp levelindex MAX_LEVEL
    jumpl no_clamp
    move levelindex MAX_LEVEL
    sub  levelindex 1
    label no_clamp

    move nextlines level
    add  nextlines 1
    mul  nextlines LINES_PER_LEVEL
    TIMERS_SET_RATE piece_timer_id LEVEL_CHANGE_RATES:levelindex
    move gfx_set_layer_colormod:window_background_layer_id LEVEL_BG_COLOR:levelindex
    move gfx_set_layer_colormod:pit_shadow_layer_id LEVEL_BG_SHADOW_COLOR:levelindex
    move gfx_set_layer_colormod:labels_layer0_id LEVEL_BG_SHADOW_COLOR:levelindex
ret

static fps_timer_id
static piece_timer_id
static input_timer_id
static bgscroll_timer_id

proc init
    local temp ints 4
    local tempf floats "0.0 0.0 0.0 0.0"
    local pitbg ints PIT_BG_SIZE 
    local pitflags ints PIT_BG_SIZE 
    local pitcolormod ints PIT_BG_SIZE
    local row ints SCREEN_TILES_WIDTH
    local background_pattern ints BACKGROUND_SIZE

    move set_window_title WINDOW_TITLE

    call load_high_scores

    call set_video_mode temp videomode
    cmp temp
    jumpn mode_ok
    move set_running 0
    jump end
    label mode_ok

    call timers_clear
    call objects_setup
    OBJECTS_SET_SCREEN_SIZE SCREEN_WIDTH SCREEN_HEIGHT

    move temp:0 gfx:CRSG_OFFSET_WIDTH
    mul  temp:0 TILEMAP_PIXEL_BYTES
    call gfx_add_tileset gfx:CRSG_OFFSET_DATA gfx:CRSG_OFFSET_WIDTH gfx:CRSG_OFFSET_HEIGHT temp:0 TILE_SIDE TILE_SIDE gfx_id

    move temp:0 font:CRSG_OFFSET_WIDTH
    mul  temp:0 TILEMAP_PIXEL_BYTES
    call gfx_add_tileset font:CRSG_OFFSET_DATA font:CRSG_OFFSET_WIDTH font:CRSG_OFFSET_HEIGHT temp:0 FONT_SIDE FONT_SIDE font_id

    ; single sprite
    move temp:0 title:CRSG_OFFSET_WIDTH
    mul  temp:0 TILEMAP_PIXEL_BYTES
    call gfx_add_tileset title:CRSG_OFFSET_DATA title:CRSG_OFFSET_WIDTH title:CRSG_OFFSET_HEIGHT temp:0 title:CRSG_OFFSET_WIDTH title:CRSG_OFFSET_HEIGHT title_id

    call gfx_add_tilemap gfx_id TILEMAP_WIDTH TILEMAP_HEIGHT block_tilemap_id
    call gfx_set_tilemap_map block_tilemap_id PIECE_TILEMAP
    call gfx_set_tilemap_attr_colormod block_tilemap_id PIECE_COLORMOD
    call gfx_update_tilemap block_tilemap_id
    call gfx_add_layer block_tilemap_id block_layer_id
    call objects_get_free block_obj block_layer_id
    ; set some parameter otherwise it won't be updated right away
    OBJECTS_SET_SCALE block_obj 1 1
    move temp:0 TILE_SIDE
    move temp:1 TILE_SIDE
    move gfx_set_layer_window:block_layer_id temp
    call gfx_add_tilemap gfx_id PIT_BG_WIDTH PIT_BG_HEIGHT pit_background_id
    call gfx_add_layer pit_background_id pit_background_layer_id
    call objects_get_free pit_bg_obj pit_background_layer_id

    call gfx_add_tilemap gfx_id PIT_WIDTH PIT_HEIGHT pit_tilemap_id0
    call gfx_add_layer pit_tilemap_id0 pit_layer_id0
    call objects_get_free pit0_obj pit_layer_id0
    call gfx_add_tilemap gfx_id PIT_WIDTH PIT_HEIGHT pit_tilemap_id1
    call gfx_add_layer pit_tilemap_id1 pit_layer_id1
    call objects_get_free pit1_obj pit_layer_id1
    call gfx_add_tilemap gfx_id PIT_WIDTH PIT_HEIGHT pit_tilemap_id2
    call gfx_add_layer pit_tilemap_id2 pit_layer_id2
    call objects_get_free pit2_obj pit_layer_id2
  
    ; don't really care that pit* aren't static because the background is only
    ; set up once and it doesn't matter if the pointer becomes invalid.
    call fill_with_border pitbg PIT_BG_WIDTH PIT_BG_HEIGHT PIT_BG_WIDTH PIT_TILE_CORNER PIT_TILE_EDGE PIT_TILE_CORNER PIT_TILE_EDGE PIT_TILE_FILL PIT_TILE_EDGE PIT_TILE_CORNER PIT_TILE_EDGE PIT_TILE_CORNER
    call gfx_set_tilemap_map pit_background_id pitbg
    call fill_with_border pitflags PIT_BG_WIDTH PIT_BG_HEIGHT PIT_BG_WIDTH 0 0 TILEMAP_HFLIP_MASK TILEMAP_ROTATE_90 0 TILEMAP_ROTATE_90 TILEMAP_VFLIP_MASK 0 TILEMAP_BFLIP_MASK
    call gfx_set_tilemap_attr_flags pit_background_id pitflags
    call fill_with_border pitcolormod PIT_BG_WIDTH PIT_BG_HEIGHT PIT_BG_WIDTH C_WHT C_WHT C_WHT C_WHT C_PIT_FILL C_WHT C_WHT C_WHT C_WHT
    call gfx_set_tilemap_attr_colormod pit_background_id pitcolormod
    call gfx_update_tilemap pit_background_id
    
    call gfx_add_tilemap gfx_id PIT_BG_WIDTH PIT_BG_HEIGHT pit_shadow_id
    call gfx_add_layer pit_shadow_id pit_shadow_layer_id
    call objects_get_free pit_sh_obj pit_shadow_id
    call fill row PIT_BG_WIDTH 1 PIT_BG_WIDTH SOLID_TILE
    call gfx_set_tilemap_map3 pit_shadow_id row 0 0 0 PIT_BG_WIDTH PIT_BG_HEIGHT
    call gfx_update_tilemap pit_shadow_id

    call gfx_add_tilemap gfx_id SCREEN_TILES_WIDTH SCREEN_TILES_HEIGHT window_background_id
    call fill row SCREEN_TILES_WIDTH 1 SCREEN_TILES_WIDTH SOLID_TILE
    ; pitch = 0 so the same row is copied for each row
    call gfx_set_tilemap_map3 window_background_id row 0 0 0 SCREEN_TILES_WIDTH SCREEN_TILES_HEIGHT
    call gfx_update_tilemap window_background_id
    call gfx_add_layer window_background_id window_background_layer_id
    call objects_get_free win_bg_obj window_background_layer_id
    OBJECTS_SET_POS win_bg_obj 0 0
    call gfx_add_layer window_background_id shade_layer_id
    call objects_get_free shade_obj shade_layer_id
    OBJECTS_SET_SCALE shade_obj 1 1
    move gfx_set_layer_blendmode:shade_layer_id GFX_BLENDMODE_SUB

    call fill_with_pattern background_pattern BACKGROUND_WIDTH BACKGROUND_HEIGHT BACKGROUND_WIDTH BACKGROUND_PATTERN BACKGROUND_PATTERN_SIDE BACKGROUND_PATTERN_SIDE BACKGROUND_PATTERN_SIDE

    call gfx_add_tilemap gfx_id BACKGROUND_WIDTH BACKGROUND_HEIGHT window_pattern_id
    call gfx_set_tilemap_map window_pattern_id background_pattern
    call gfx_update_tilemap window_pattern_id
    call gfx_add_layer window_pattern_id window_pattern0_layer_id
    call gfx_add_layer window_pattern_id window_pattern1_layer_id
    move temp:0 SCREEN_TILES_WIDTH
    mul  temp:0 TILE_SIDE
    move temp:1 SCREEN_TILES_HEIGHT
    mul  temp:1 TILE_SIDE
    move gfx_set_layer_window:window_pattern0_layer_id temp
    move gfx_set_layer_window:window_pattern1_layer_id temp
    move gfx_set_layer_blendmode:window_pattern1_layer_id GFX_BLENDMODE_SUB
    move gfx_set_layer_colormod:window_pattern1_layer_id SHADOW_SHADE
    call objects_get_free win_pat0_obj window_pattern0_layer_id
    OBJECTS_SET_POS win_pat0_obj 0 0
    call objects_get_free win_pat1_obj window_pattern1_layer_id
    OBJECTS_SET_POS win_pat1_obj 0 0

    call fill_with_pattern background_pattern BACKGROUND_WIDTH BACKGROUND_HEIGHT BACKGROUND_WIDTH BACKGROUND_PATTERN:BACKGROUND_PATTERN_SIZE BACKGROUND_PATTERN_SIDE BACKGROUND_PATTERN_SIDE BACKGROUND_PATTERN_SIDE

    call gfx_add_tilemap gfx_id PIT_PATTERN_WIDTH PIT_PATTERN_HEIGHT pit_pattern_id
    call gfx_set_tilemap_map3 pit_pattern_id background_pattern 0 0 BACKGROUND_WIDTH PIT_PATTERN_WIDTH PIT_PATTERN_HEIGHT
    call gfx_update_tilemap pit_pattern_id
    call gfx_add_layer pit_pattern_id pit_pattern0_layer_id
    call gfx_add_layer pit_pattern_id pit_pattern1_layer_id
    move temp:0 PIT_BG_WIDTH
    mul  temp:0 TILE_SIDE
    move temp:1 PIT_BG_HEIGHT
    mul  temp:1 TILE_SIDE
    move gfx_set_layer_window:pit_pattern0_layer_id temp
    move gfx_set_layer_window:pit_pattern1_layer_id temp
    move gfx_set_layer_blendmode:pit_pattern1_layer_id GFX_BLENDMODE_SUB
    move gfx_set_layer_colormod:pit_pattern1_layer_id SHADOW_SHADE
    call objects_get_free pit_pat0_obj pit_pattern0_layer_id
    call objects_get_free pit_pat1_obj pit_pattern1_layer_id

    ; reuse background_pattern because it's a very large buffer
    call gfx_add_tilemap font_id LABELS_TILEMAP_WIDTH LABELS_TILEMAP_HEIGHT labels_tilemap_id
    call text_string_to_tilemap background_pattern CONTROLS_TEXT_WIDTH CONTROLS_TEXT_HEIGHT LABELS_TILEMAP_WIDTH CONTROLS_TEXT
    move temp LABELS_TILEMAP_WIDTH
    mul  temp LINES_POS
    call text_string_to_tilemap background_pattern:temp LINES_TEXT: 1 LINES_TEXT: LINES_TEXT
    move temp LABELS_TILEMAP_WIDTH
    mul  temp LEVEL_POS
    call text_string_to_tilemap background_pattern:temp LEVEL_TEXT: 1 LEVEL_TEXT: LEVEL_TEXT
    move temp LABELS_TILEMAP_WIDTH
    mul  temp SCORE_POS
    call text_string_to_tilemap background_pattern:temp SCORE_TEXT: 1 SCORE_TEXT: SCORE_TEXT
    move temp LABELS_TILEMAP_WIDTH
    mul  temp NEXT_POS
    call text_string_to_tilemap background_pattern:temp NEXT_TEXT: 1 NEXT_TEXT: NEXT_TEXT
    move temp LABELS_TILEMAP_WIDTH
    mul  temp NAME_POS
    call text_string_to_tilemap background_pattern:temp NAME_TEXT: 1 NAME_TEXT: NAME_TEXT
    call gfx_set_tilemap_map labels_tilemap_id background_pattern 
    call gfx_update_tilemap labels_tilemap_id
    call gfx_add_layer labels_tilemap_id labels_layer0_id
    call gfx_add_layer labels_tilemap_id labels_layer1_id
    move gfx_set_layer_blendmode:labels_layer1_id GFX_BLENDMODE_SUB
    move gfx_set_layer_colormod:labels_layer1_id SHADOW_SHADE
    call objects_get_free labels0_obj labels_layer0_id
    call objects_get_free labels1_obj labels_layer1_id
    OBJECTS_SET_SCALE labels0_obj FONT_SCALE FONT_SCALE
    OBJECTS_SET_SCALE labels1_obj FONT_SCALE FONT_SCALE

    call gfx_add_tilemap font_id 128 1 characters_tilemap_id
    move temp 0
    label characters_fill
        cmp temp 128
        jumpz done_characters_fill
        move background_pattern:temp temp
        add temp 1
    jump characters_fill
    label done_characters_fill
    call gfx_set_tilemap_map characters_tilemap_id background_pattern
    call gfx_update_tilemap characters_tilemap_id
    call gfx_add_layer characters_tilemap_id characters_layer_id
    move temp:0 FONT_SIDE
    move temp:1 FONT_SIDE
    move gfx_set_layer_window:characters_layer_id temp
    call objects_get_free characters_obj characters_layer_id
    OBJECTS_SET_SCALE characters_obj FONT_SCALE FONT_SCALE

    call gfx_add_tilemap title_id 1 1 title_tilemap_id
    move temp 0
    call gfx_set_tilemap_map title_tilemap_id temp
    call gfx_update_tilemap title_tilemap_id
    call gfx_add_layer title_tilemap_id title_layer_id
    call objects_get_free title_obj title_layer_id
    move tempf:1 title:CRSG_OFFSET_WIDTH
    mul  tempf:1 TITLE_SCALE
    CENTER tempf:0 SCREEN_WIDTH tempf:1
    OBJECTS_SET_POS_AND_SCALE title_obj tempf:0 tempf:0 TITLE_SCALE TITLE_SCALE

    call gfx_add_tilemap font_id HIGH_SCORE_TILEMAP_WIDTH HIGH_SCORE_COUNT high_score_tilemap_id
    call gfx_add_layer high_score_tilemap_id high_score_layer_id
    call objects_get_free high_score_obj high_score_layer_id
    OBJECTS_SET_SCALE high_score_obj FONT_SCALE FONT_SCALE
    call update_high_score_tilemap high_score_tilemap_id

    ; center the pit
    CENTER tempf:0 SCREEN_WIDTH PIT_PXWIDTH
    CENTER tempf:1 SCREEN_HEIGHT PIT_PXHEIGHT
    move tempf:2 tempf:0
    move tempf:3 tempf:1
    sub  tempf:2 TILE_SIDE
    sub  tempf:3 TILE_SIDE
    move pitxpos tempf:0
    move pitypos tempf:1
    OBJECTS_SET_POS pit0_obj pitxpos pitypos
    OBJECTS_SET_POS pit1_obj pitxpos pitypos
    OBJECTS_SET_POS pit2_obj pitxpos pitypos
    move temp:0 tempf:2
    move temp:1 tempf:3
    OBJECTS_SET_POS pit_bg_obj temp:0 temp:1
    OBJECTS_SET_POS pit_sh_obj pitxpos pitypos
    OBJECTS_SET_POS pit_pat0_obj pitxpos pitypos
    OBJECTS_SET_POS pit_pat1_obj pitxpos pitypos

    call timers_get_free fps_timer_id 1000
    ; not ready to get this one going yet but just get the ID
    call timers_get_free piece_timer_id 0
    call timers_get_free input_timer_id INPUT_DELAY
    call timers_get_free bgscroll_timer_id BGSCROLL_DELAY

    move bgscroll0:0 0
    move bgscroll0:1 0
    move bgscroll1:0 BACKGROUND_PATTERN_PXSIDE
    sub  bgscroll1:0 1
    move bgscroll1:1 BACKGROUND_PATTERN_PXSIDE
    sub  bgscroll1:1 1
    move bgscroll2:0 0
    move bgscroll2:1 0
    move bgscroll3:0 BACKGROUND_PATTERN_PXSIDE
    sub  bgscroll3:0 1
    move bgscroll3:1 BACKGROUND_PATTERN_PXSIDE
    sub  bgscroll3:1 1
    move gfx_set_layer_scroll_pos:window_pattern0_layer_id bgscroll0
    move gfx_set_layer_scroll_pos:window_pattern1_layer_id bgscroll1
    move gfx_set_layer_scroll_pos:pit_pattern0_layer_id bgscroll2
    move gfx_set_layer_scroll_pos:pit_pattern1_layer_id bgscroll3

    ; will be called anyway later, but the background and some initial things
    ; need to be set up first
    call setup_game
    label end
ret

static fps

proc count_fps
    local elapsed

    call timers_check elapsed fps_timer_id
    cmp elapsed
    jumpz fps_continue
    move err fps
    move err NL
    move fps 0

    label fps_continue
    add fps 1
ret

proc pit_effect
    local piece
    local rotation
    local width
    local height
    local pos
    local maxx
    local maxy
    local x
    local y

    move piece get_random
    mod  piece PIECEINFO_PIECES
    add  piece 1
    move rotation get_random
    mod  rotation PIECEINFO_ROTATIONS

    call populate_piece_values piece rotation pos width height

    move maxx PIT_WIDTH
    sub  maxx width
    add  maxx 1
    move maxy PIT_HEIGHT
    sub  maxy height
    add  maxy 1
    move x get_random
    mod  x maxx
    move y get_random
    mod  y maxy

    call update_pit_map piece rotation x y
    call update_pit_tilemaps_from_piece piece rotation x y
ret

proc draw_shade x y w h shade
    local temp ints 2

    OBJECTS_SET_POS shade_obj x y
    move temp:0 w
    move temp:1 h
    move gfx_set_layer_window:shade_layer_id temp
    move gfx_set_layer_colormod:shade_layer_id shade
    move gfx_draw_layer shade_layer_id
ret

proc draw_text obj x y width height string animated
    local temp ints 2
    local stringpos 0
    local xpos 0
    local ypos
    local no_advance
    local layer_id
    local wordstart
    local wordlen
    local remain
    local anim_offset
    local anim_offset_dir

    move anim_offset text_anim_start
    move anim_offset_dir text_anim_dir

    OBJECTS_GET_LAYER_ID layer_id obj

    move ypos FONT_SCALED_SIDE
    label do_word
        move no_advance 0
        ; eat any leading spaces or newlines
        label eat_whitespace
            cmp stringpos string:
            jumpz end

            cmp string:stringpos SPC
            jumpz eat_space
            cmp string:stringpos NL
            jumpz eat_newline
        jump done_eat_whitespace
        label eat_space
            cmp no_advance
            jumpn eat_whitespace

            add xpos FONT_SCALED_SIDE
            cmp xpos width
            jumpl no_wrap
                cmp ypos height
                jumpg end
                jumpz end
                add ypos FONT_SCALED_SIDE
                move xpos 0

                move no_advance 1
            label no_wrap

            add stringpos 1
        jump eat_whitespace
        label eat_newline
            add ypos FONT_SCALED_SIDE
            cmp ypos height
            jumpz end

            move no_advance 0
            move xpos 0
            add stringpos 1
        jump eat_whitespace
        label done_eat_whitespace

        ; find the length of the word that needs to be copied
        move wordstart stringpos
        label find_wordend
            cmp string:stringpos SPC
            jumpz found_wordend
            cmp string:stringpos NL
            jumpz found_wordend
            ; this one is special because the procedure shouldn't just quit at
            ; the end of the string, but consider this the end of the word
            add stringpos 1
            cmp stringpos string:
            jumpz found_wordend
        jump find_wordend
        label found_wordend

        ; if the word doesn't fit and tilemapx is 0, just copy the word
        ; character by character advancing the character each time. if tilemapx
        ; isn't 0, jump to the next line then try the check again. if it still
        ; doesn't fit, it'll just revert to fully copying.

        move wordlen stringpos
        ; reset the string position to the start of the word after it's done
        ; with the value
        move stringpos wordstart
        sub  wordlen wordstart
        label retry_word
        move remain width
        sub  remain xpos
        div  remain FONT_SCALED_SIDE
        cmp  wordlen remain
        jumpg try_new_line

        label copy_word
            move temp:0 string:stringpos
            mul  temp:0 FONT_SIDE
            move temp:1 0
            move gfx_set_layer_scroll_pos:layer_id temp
            move temp:0 xpos
            add  temp:0 x
            move temp:1 ypos
            add  temp:1 y
            sub  temp:1 FONT_SCALED_SIDE
            cmp animated
            jumpz no_animation
                add temp:1 anim_offset
                call text_anim_next anim_offset anim_offset_dir
            label no_animation
            OBJECTS_SET_POS obj temp:0 temp:1
            move gfx_draw_layer layer_id

            add xpos FONT_SCALED_SIDE
            cmp xpos width
            jumpl no_wrap2
                cmp ypos height
                jumpg end
                jumpz end
                add ypos FONT_SCALED_SIDE
                move xpos 0
            label no_wrap2

            add stringpos 1
            sub wordlen 1
        jumpg copy_word
        jump do_word_continue

        label try_new_line
            ; check if already at the start of the line
            cmp xpos 0
            jumpz copy_line
            cmp ypos height
            jumpg end
            jumpz end
            add ypos FONT_SCALED_SIDE
            move xpos 0
            jump retry_word

        label copy_line
            move temp:0 string:stringpos
            mul  temp:0 FONT_SIDE
            move temp:1 0
            move gfx_set_layer_scroll_pos:layer_id temp
            move temp:0 xpos
            add  temp:0 x
            move temp:1 ypos
            add  temp:1 y
            sub  temp:1 FONT_SCALED_SIDE
            OBJECTS_SET_POS obj temp:0 temp:1
            move gfx_draw_layer layer_id

            add xpos FONT_SCALED_SIDE
            add stringpos 1
            sub remain 1
        jumpg copy_line

        cmp ypos height
        jumpg end
        jumpz end
        add ypos FONT_SCALED_SIDE
        move xpos 0

        label do_word_continue
    jumpz do_word
    label end
ret

macro ADVANCE_BGSCROLL VAR DIR MAX
    add VAR DIR
    cmp VAR MAX
    jumpz wrap_VAR_0
    cmp VAR 0
    jumpl wrap_VAR_max
    jump wrap_VAR_done
    label wrap_VAR_0
    move VAR 0
    jump wrap_VAR_done
    label wrap_VAR_max
    move VAR MAX
    sub  VAR 1
    label wrap_VAR_done
endmacro ADVANCE_BGSCROLL

macro DRAW_LABEL LPOS WIDTH HEIGHT XPOS YPOS
    move temp:0 WIDTH
    mul  temp:0 FONT_SIDE
    move temp:1 HEIGHT
    mul  temp:1 FONT_SIDE
    move gfx_set_layer_window:labels_layer0_id temp
    move gfx_set_layer_window:labels_layer1_id temp
    move temp:0 0
    move temp:1 LPOS
    mul  temp:1 FONT_SIDE
    move gfx_set_layer_scroll_pos:labels_layer0_id temp
    move gfx_set_layer_scroll_pos:labels_layer1_id temp
    move temp:0 XPOS
    move temp:1 YPOS
    OBJECTS_SET_POS labels0_obj temp:0 temp:1
    add  temp:0 1
    add  temp:1 1
    OBJECTS_SET_POS labels1_obj temp:0 temp:1
    move gfx_draw_layer labels_layer1_id
    move gfx_draw_layer labels_layer0_id
endmacro DRAW_LABEL

proc draw_number num xpos ypos
    local temp ints 2
    local tempnum string "           "
    local tempnummap ints MAX_INTEGER_SIZE
    local numlen

    call text_integer_to_string numlen tempnum num
    move temp:0 numlen
    mul  temp:0 FONT_SCALED_SIDE
    move temp:1 FONT_SCALED_SIDE
    call draw_text characters_obj xpos ypos temp:0 temp:1 tempnum 0
ret

static bgscroll0 ints 2
static bgscroll1 ints 2
static bgscroll2 ints 2
static bgscroll3 ints 2
expr TEXT_ANIM_AMP 6
static text_anim_dir 1
static text_anim_start 0

proc text_anim_next start dir
    local temp

    move temp TEXT_ANIM_AMP
    mul  temp dir
    cmp  start temp
    jumpz text_anim_reverse
    jump no_text_anim_reverse
    label text_anim_reverse
    mul  dir -1
    label no_text_anim_reverse
    add  start dir
ret

proc draw_screen elapsed
    call timers_check elapsed bgscroll_timer_id
    cmp elapsed
    jumpz no_bgscroll
    ADVANCE_BGSCROLL bgscroll0:0 1  BACKGROUND_PATTERN_PXSIDE
    ADVANCE_BGSCROLL bgscroll0:1 -1 BACKGROUND_PATTERN_PXSIDE
    ADVANCE_BGSCROLL bgscroll1:0 1  BACKGROUND_PATTERN_PXSIDE
    ADVANCE_BGSCROLL bgscroll1:1 -1 BACKGROUND_PATTERN_PXSIDE
    ADVANCE_BGSCROLL bgscroll2:0 1 BACKGROUND_PATTERN_PXSIDE
    ADVANCE_BGSCROLL bgscroll2:1 1 BACKGROUND_PATTERN_PXSIDE
    ADVANCE_BGSCROLL bgscroll3:0 1 BACKGROUND_PATTERN_PXSIDE
    ADVANCE_BGSCROLL bgscroll3:1 1 BACKGROUND_PATTERN_PXSIDE

    call text_anim_next text_anim_start text_anim_dir

    move gfx_set_layer_scroll_pos:window_pattern0_layer_id bgscroll0
    move gfx_set_layer_scroll_pos:window_pattern1_layer_id bgscroll1
    move gfx_set_layer_scroll_pos:pit_pattern0_layer_id bgscroll2
    move gfx_set_layer_scroll_pos:pit_pattern1_layer_id bgscroll3
    label no_bgscroll
    move gfx_draw_layer window_background_layer_id
    move gfx_draw_layer window_pattern1_layer_id
    move gfx_draw_layer window_pattern0_layer_id
    call draw_pit
ret

proc draw_game_stats
    local temp ints 3

    move temp:2 CONTROLS_TEXT_SCREEN_POS
    mul  temp:2 FONT_SCALED_SIDE
    DRAW_LABEL CONTROLS_TEXT_POS CONTROLS_TEXT_WIDTH CONTROLS_TEXT_HEIGHT FONT_SIDE temp:2
    move temp:2 LINES_SCREEN_POS
    mul  temp:2 FONT_SCALED_SIDE
    DRAW_LABEL LINES_POS LINES_TEXT: 1 FONT_SIDE temp:2
    move temp:2 LINES_NUM_SCREEN_POS
    mul  temp:2 FONT_SCALED_SIDE
    call draw_number lines_cleared FONT_SIDE temp:2
    move temp:2 LEVEL_SCREEN_POS
    mul  temp:2 FONT_SCALED_SIDE
    DRAW_LABEL LEVEL_POS LEVEL_TEXT: 1 FONT_SIDE temp:2
    move temp:2 LEVEL_NUM_SCREEN_POS
    mul  temp:2 FONT_SCALED_SIDE
    call draw_number level FONT_SIDE temp:2
    move temp:2 SCORE_SCREEN_POS
    mul  temp:2 FONT_SCALED_SIDE
    DRAW_LABEL SCORE_POS SCORE_TEXT: 1 FONT_SIDE temp:2
    move temp:2 SCORE_NUM_SCREEN_POS
    mul  temp:2 FONT_SCALED_SIDE
    call draw_number score FONT_SIDE temp:2
    move temp:2 NEXT_SCREEN_POS
    mul  temp:2 FONT_SCALED_SIDE
    DRAW_LABEL NEXT_POS NEXT_TEXT: 1 FONT_SIDE temp:2
    call draw_piece block_layer_id nextpiece 0 FONT_SIDE NEXT_PIECE_POS
ret

proc draw_keyboard
    local x
    local y
    local i 0
    local pos ints 2
    local tmpos ints 2

    move pos:0 FONT_SIDE
    move pos:1 FONT_SIDE
    move gfx_set_layer_window:characters_layer_id pos

    move pos:1 SCREEN_KEYBOARD_YPOS
    move tmpos:1 0
    move y SCREEN_KEYBOARD_HEIGHT
    label y
        move pos:0 SCREEN_KEYBOARD_XPOS
        move x SCREEN_KEYBOARD_WIDTH
        label x
            move tmpos:0 SCREEN_KEYBOARD:i
            mul  tmpos:0 FONT_SIDE
            move gfx_set_layer_scroll_pos:characters_layer_id tmpos
            OBJECTS_SET_POS characters_obj pos:0 pos:1
            move gfx_draw_layer characters_layer_id
            add i 1
            add pos:0 SCREEN_KEYBOARD_HSPACING
            sub x 1
        jumpg x

        add pos:1 SCREEN_KEYBOARD_VSPACING
        sub y 1
    jumpg y
ret

static level
static nextpiece
static curpiece
static currotation
static xpos
static ypos
static lastmove
static move
static tapped
static fall
static rotate
static lines_cleared
static nextlines
static score
static highscorepos

expr GAME_MODE_PLAYING   0
expr GAME_MODE_ENDED     1
expr GAME_MODE_TITLE     2
expr GAME_MODE_SHOWHIGH  3
expr GAME_MODE_ENTERHIGH 4

static game_mode GAME_MODE_TITLE

proc setup_game
    local i

    ; reset variables
    move level STARTING_LEVEL
    move curpiece DEBUG_START_PIECE
    move lastmove 0
    move move 0
    move tapped 0
    move fall 0
    move rotate 0
    move lines_cleared 0
    move score 0
    move nextpiece get_random
    mod  nextpiece PIECEINFO_PIECES
    add  nextpiece 1
 
    ; clear the pit
    move i PIT_SIZE
    label clear_pit
        sub i 1
        jumpl done_clear_pit
        move pit:i 0
    jump clear_pit
    label done_clear_pit    
    
    ; update the whole pit
    call update_pit_tilemaps 0 0 PIT_WIDTH PIT_HEIGHT

    call update_level
ret

static title_cycle 0
expr TITLE_CYCLE_LENGTH "10 * 60"

proc do_title_frame
    local temp ints 4
    local textw
    local textx
    local texty
    local shadew
    local shadeh
    local shadex
    local shadey
    local titlew
    local titlex
    local elapsed

    call pit_effect
    call draw_screen elapsed
    call draw_shade 0 0 SCREEN_WIDTH SCREEN_HEIGHT SHADOW_SHADE
    move gfx_draw_layer title_layer_id

    move textw PRESS_ENTER_TEXT:
    move shadew textw
    add  shadew 2
    mul  textw FONT_SCALED_SIDE
    mul  shadew FONT_SCALED_SIDE
    move shadeh FONT_SCALED_SIDE
    mul  shadeh 3
    CENTER shadex SCREEN_WIDTH shadew
    move textx shadex
    add  textx FONT_SCALED_SIDE
    move titlew title:CRSG_OFFSET_WIDTH
    mul  titlew TITLE_SCALE
    CENTER titlex SCREEN_WIDTH titlew
    move shadey SCREEN_HEIGHT
    sub  shadey titlex
    sub  shadey shadeh
    move texty shadey
    add  texty FONT_SCALED_SIDE

    call draw_shade shadex shadey shadew shadeh SHADOW_SHADE
    call draw_text characters_obj textx texty textw FONT_SCALED_SIDE PRESS_ENTER_TEXT 1

    cmp elapsed
    jumpz end
        add title_cycle 1
        cmp title_cycle TITLE_CYCLE_LENGTH
        jumpl no_switch
            move game_mode GAME_MODE_SHOWHIGH
            move title_cycle 0
        label no_switch
    label end
ret

proc do_showhigh_frame
    local elapsed

    call pit_effect
    call draw_screen elapsed
    call draw_shade 0 0 SCREEN_WIDTH SCREEN_HEIGHT SHADOW_SHADE
    call draw_high_score_table HIGH_SCORE_TITLE

    cmp elapsed
    jumpz end
        add title_cycle 1
        cmp title_cycle TITLE_CYCLE_LENGTH
        jumpl no_switch
            move game_mode GAME_MODE_TITLE
            move title_cycle 0
        label no_switch
    label end
ret

proc do_game_frame
    local curTick
    local width
    local height
    local pos
    local elapsed
    local xmove
    local ymove
    local collided
    local lines
    local temp

    cmp curpiece
    jumpn have_piece
        move curpiece nextpiece
        move nextpiece get_random
        mod  nextpiece PIECEINFO_PIECES
        add  nextpiece 1
        move currotation 0
        move ypos 0
        call populate_piece_values curpiece currotation pos width height
        move xpos PIT_WIDTH
        sub  xpos width
        div  xpos 2

        call check_collision collided xpos ymove pos width height
        cmp collided
        jumpz have_piece
        call update_pit_map curpiece currotation xpos ypos
        call update_pit_tilemaps_from_piece curpiece currotation xpos ypos

        call check_high_score highscorepos score
        cmp highscorepos HIGH_SCORE_COUNT
        jumpz no_high_score
            call bump_high_score highscorepos
            move high_lines:highscorepos lines_cleared
            move high_levels:highscorepos level
            move high_scores:highscorepos score
            call update_high_score_tilemap high_score_tilemap_id
            move highscore_name_pos 0
            move keyboard_selector_pos:0 0
            move keyboard_selector_pos:1 0
            move game_mode GAME_MODE_ENTERHIGH
        jump done_update
        label no_high_score
            move game_mode GAME_MODE_ENDED
        jump done_update
    label have_piece

    ; nothing to do if lastmove and move are equal since there's no state to
    ; transition to
    cmp lastmove move
    jumpz done_tap

    cmp move 0
    jumpl tap_left
    jumpg tap_right
    ; transition to 0, rearm to allow more tapping.
    move lastmove 0
    jump done_tap

    label tap_left
    cmp move lastmove
    jumpz done_tap
    ; transition to left, move left and set lastmove to move to make sure a
    ; tap isn't signaled until lastmove has been reset back to 0 if the user
    ; has indicated to stop.  initialize tapped to allow a delay before the
    ; motion repeats.
    move xmove -1
    move lastmove move
    move tapped TAP_DELAY
    jump done_tap

    label tap_right
    cmp move lastmove
    jumpz done_tap
    ; same as above
    move xmove 1
    move lastmove move
    move tapped TAP_DELAY
    label done_tap

    call timers_check elapsed input_timer_id
    cmp elapsed
    jumpz done_repeat

    cmp fall
    jumpz no_fall
    move ymove 1
    label no_fall

    ; the timer has elapsed, check to see if lastmove and move are equal,
    ; tapped is 0 (and if not, decrease it), then figure out what to do with
    ; move
    cmp move lastmove
    jumpn done_repeat
    cmp tapped 0
    jumpn dec_tapped
    cmp move 0
    jumpl move_left
    jumpg move_right
    jump done_repeat

    label move_left
    move xmove -1
    jump done_repeat

    label move_right
    move xmove 1
    jump done_repeat

    label dec_tapped
    sub tapped 1
    label done_repeat

    call try_resolve_piece_movement curpiece currotation xpos ypos xmove ymove rotate
    ; reset rotation so it only happens once
    move rotate 0

    call timers_check elapsed piece_timer_id
    cmp elapsed
    jumpz done_update
    move ymove ypos
    add  ymove DEBUG_DO_PIECE_FALL

    ; repopulate because they may have changed
    call populate_piece_values curpiece currotation pos width height
    ; check to see if moving down would collide, and if so, plant the piece
    call check_collision collided xpos ymove pos width height
    cmp  collided
    jumpn plant_piece
    move ypos ymove
    jump done_update

    label plant_piece
        call update_pit_map curpiece currotation xpos ypos
        call check_lines lines ypos height
        cmp lines
        jumpg update_pit_lines
        call update_pit_tilemaps_from_piece curpiece currotation xpos ypos
        jump done_pit_updates
        label update_pit_lines
        add lines_cleared lines
        move temp level
        add  temp 1
        mul  temp LINES_SCORE_SCALE:lines
        add  score temp
        cmp lines_cleared nextlines
        jumpl no_next_level
        call update_level
        label no_next_level
        ; update the pit up to the line the piece fell to
        add height ypos
        call update_pit_tilemaps 0 0 PIT_WIDTH height
        label done_pit_updates
        ; signal piece reset
        move curpiece 0

    label done_update
        call draw_screen temp
        call draw_game_stats

        move xmove xpos
        mul  xmove TILE_SIDE
        add  xmove pitxpos
        move ymove ypos
        mul  ymove TILE_SIDE
        add  ymove pitypos
        call draw_piece block_layer_id curpiece currotation xmove ymove
ret

static keyboard_selector_pos ints 2
static highscore_name_pos

proc do_enterhigh_frame
    local temp
    local x
    local y

    call draw_screen temp
    call draw_shade 0 0 SCREEN_WIDTH SCREEN_HEIGHT SHADOW_SHADE
    call draw_high_score_table GOT_HIGH_SCORE_TITLE
    call draw_keyboard

    move x keyboard_selector_pos:0
    mul  x SCREEN_KEYBOARD_HSPACING
    add  x SCREEN_KEYBOARD_XPOS
    sub  x SELECTOR_PAD
    move y keyboard_selector_pos:1
    mul  y SCREEN_KEYBOARD_VSPACING
    add  y SCREEN_KEYBOARD_YPOS
    sub  y SELECTOR_PAD
    call draw_shade x y SCREEN_KEYBOARD_SELECTOR_SIDE SCREEN_KEYBOARD_SELECTOR_SIDE SELECTOR_SHADE

    cmp highscore_name_pos HIGH_SCORE_NAME_LENGTH
    jumpz show_confirm
        move x highscore_name_pos
        mul  x FONT_SCALED_SIDE
        add  x HIGH_SCORE_NAME_POS
        sub  x SELECTOR_PAD
        move y highscorepos
        mul  y HIGH_SCORE_SPACING
        add  y HIGH_SCORE_START_POS
        sub  y SELECTOR_PAD
        call draw_shade x y SCREEN_KEYBOARD_SELECTOR_SIDE SCREEN_KEYBOARD_SELECTOR_SIDE SELECTOR_SHADE

        move x highscore_name_pos
        mul  x FONT_SCALED_SIDE
        add  x HIGH_SCORE_NAME_POS
        add  y SELECTOR_PAD
        move temp keyboard_selector_pos:1
        mul  temp SCREEN_KEYBOARD_WIDTH
        add  temp keyboard_selector_pos:0
        move temp SCREEN_KEYBOARD:temp
        call draw_text characters_obj x y FONT_SCALED_SIDE FONT_SCALED_SIDE temp 0
    jump end
    label show_confirm
        move y highscorepos
        mul  y HIGH_SCORE_SPACING
        add  y HIGH_SCORE_START_POS
        sub  y SELECTOR_PAD
        move x HIGH_SCORE_NAME_POS
        sub  x SELECTOR_PAD
        move temp HIGH_SCORE_NAME_PXLENGTH
        add  temp SELECTOR_PAD
        add  temp SELECTOR_PAD
        call draw_shade x y temp SCREEN_KEYBOARD_SELECTOR_SIDE SELECTOR_SHADE
    label end

    move y highscorepos
    mul  y HIGH_SCORE_SPACING
    add  y HIGH_SCORE_START_POS
    move temp highscorepos
    mul  temp HIGH_SCORE_NAME_LENGTH
    call draw_text characters_obj HIGH_SCORE_NAME_POS y HIGH_SCORE_NAME_PXLENGTH FONT_SCALED_SIDE high_score_names:temp 0
ret

proc do_gameover_frame
    local temp

    call draw_screen temp
    call draw_game_stats
ret

proc frame
    local temp

    cmp game_mode GAME_MODE_TITLE
    jumpz do_title
    cmp game_mode GAME_MODE_PLAYING
    jumpz do_game
    cmp game_mode GAME_MODE_ENTERHIGH
    jumpz do_enterhigh
    cmp game_mode GAME_MODE_ENDED
    jumpz do_gameover
    cmp game_mode GAME_MODE_SHOWHIGH
    jumpz do_showhigh
    jump end
    label do_title
        call do_title_frame
    jump end
    label do_game
        call do_game_frame
    jump end
    label do_enterhigh
        call do_enterhigh_frame
    jump end
    label do_gameover
        call do_gameover_frame
    jump end
    label do_showhigh
        call do_showhigh_frame
    label end

    ; always do random
    move temp get_random
;    call count_fps
ret

proc generic_event keycode
    cmp event_get_button INPUT_KEY_f
    jumpz toggle_fullscreen
    cmp event_get_button INPUT_KEY_ESCAPE
    jumpz quit
    jump end

    label toggle_fullscreen
        call toggle_fullscreen
        call objects_update_global_scale
        call objects_update_scales
        move keycode -1
    jump end

    label quit
        call save_high_scores
        move set_running 0
        move keycode -1
    jump end

    label end
ret

proc do_title_event
    local button

    cmp event_get_type INPUT_TYPE_KEYDOWN
    jumpn end
    move button event_get_button
    call generic_event button
    cmp button
    jumpl end

    cmp button INPUT_KEY_RETURN
    jumpz start_game
    jump end

    label start_game
        ; TODO look in to flicker when transitioning from title to game
        call setup_game
        move game_mode GAME_MODE_PLAYING
    jump end

    label end
ret

proc do_game_event
    local button

    cmp event_get_type INPUT_TYPE_KEYDOWN
    jumpn keyup
    move button event_get_button
    call generic_event button
    cmp button
    jumpl end

    cmp button INPUT_KEY_a
    jumpz move_left
    cmp button INPUT_KEY_d
    jumpz move_right
    cmp button INPUT_KEY_q
    jumpz rotate_left
    cmp button INPUT_KEY_e
    jumpz rotate_right
    cmp button INPUT_KEY_s
    jumpz fall
    jump end

    label move_left
        move move -1
    jump end

    label move_right
        move move 1
    jump end

    label rotate_left
        move rotate -1
    jump end

    label rotate_right
        move rotate 1
    jump end

    label fall
        move fall 1
    jump end

    label keyup
    cmp event_get_type INPUT_TYPE_KEYUP
    jumpn end
    cmp event_get_button INPUT_KEY_a
    jumpz no_move_left
    cmp event_get_button INPUT_KEY_d
    jumpz no_move_right
    cmp event_get_button INPUT_KEY_s
    jumpz nofall
    jump end

    label no_move_left
        cmp move 0
        jumpg end
        move move 0
    jump end

    label no_move_right
        cmp move 0
        jumpl end
        move move 0
    jump end

    label nofall
        move fall 0
    jump end
 
    label end
ret

proc do_enterhigh_event
    local button
    local keyboardpos
    local stringpos

    cmp event_get_type INPUT_TYPE_KEYDOWN
    jumpn end
    move button event_get_button
    call generic_event button
    cmp button
    jumpl end

    cmp button INPUT_KEY_a
    jumpz cursor_left
    cmp button INPUT_KEY_d
    jumpz cursor_right
    cmp button INPUT_KEY_w
    jumpz cursor_up
    cmp button INPUT_KEY_s
    jumpz cursor_down
    cmp button INPUT_KEY_RETURN
    jumpz enter_char
    cmp button INPUT_KEY_BACKSPACE
    jumpz backspace_char
    jump end

    label cursor_left
        sub keyboard_selector_pos:0 1
        jumpg end
        jumpz end
        move keyboard_selector_pos:0 SCREEN_KEYBOARD_WIDTH
        sub  keyboard_selector_pos:0 1
    jump end

    label cursor_right
        add keyboard_selector_pos:0 1
        cmp keyboard_selector_pos:0 SCREEN_KEYBOARD_WIDTH
        jumpl end
        move keyboard_selector_pos:0 0
    jump end

    label cursor_up
        sub keyboard_selector_pos:1 1
        jumpg end
        jumpz end
        move keyboard_selector_pos:1 SCREEN_KEYBOARD_HEIGHT
        sub  keyboard_selector_pos:1 1
    jump end

    label cursor_down
        add keyboard_selector_pos:1 1
        cmp keyboard_selector_pos:1 SCREEN_KEYBOARD_HEIGHT
        jumpl end
        move keyboard_selector_pos:1 0
    jump end

    label enter_char
        cmp highscore_name_pos HIGH_SCORE_NAME_LENGTH
        jumpz submit_score
        move keyboardpos keyboard_selector_pos:1
        mul  keyboardpos SCREEN_KEYBOARD_WIDTH
        add  keyboardpos keyboard_selector_pos:0
        move stringpos highscorepos
        mul  stringpos HIGH_SCORE_NAME_LENGTH
        add  stringpos highscore_name_pos
        move high_score_names:stringpos SCREEN_KEYBOARD:keyboardpos
        add highscore_name_pos 1
    jump end

    label backspace_char
        cmp highscore_name_pos 0
        jumpz end
        sub highscore_name_pos 1
        move stringpos highscorepos
        mul  stringpos HIGH_SCORE_NAME_LENGTH
        add  stringpos highscore_name_pos
        move high_score_names:stringpos SPC
    jump end

    label submit_score
        call update_high_score_tilemap high_score_tilemap_id
        move title_cycle 0
        move game_mode GAME_MODE_ENDED
    jump end
       
    label end
ret

proc do_gameover_event
    local button

    cmp event_get_type INPUT_TYPE_KEYDOWN
    jumpn end
    move button event_get_button
    call generic_event button
    cmp button
    jumpl end

    cmp button INPUT_KEY_RETURN
    jumpz start_game
    jump end

    label start_game
        move game_mode GAME_MODE_TITLE
    jump end

    label end
ret

proc event
    cmp game_mode GAME_MODE_TITLE
    jumpz do_title
    cmp game_mode GAME_MODE_SHOWHIGH
    ; part of the title/endgame attract mode
    jumpz do_title
    cmp game_mode GAME_MODE_ENTERHIGH
    jumpz do_enterhigh
    cmp game_mode GAME_MODE_PLAYING
    jumpz do_game
    cmp game_mode GAME_MODE_ENDED
    jumpz do_gameover
    jump end
    label do_title
        call do_title_event
    jump end
    label do_enterhigh
        call do_enterhigh_event
    jump end
    label do_game
        call do_game_event
    jump end
    label do_gameover
        call do_gameover_event
    label end
ret
